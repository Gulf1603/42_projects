idee algo :


faire un score de placement pour le calcul de l'action optimal, on le laisse regarder pour 4/5 coup dans le futur ?
ex :
pour un r ou rr, le score est proportionnel au "places gagnes", a l'ecart nouveau entre les deux premiers
pour un p, le score est propotionnel a l'ecart entre les deux elements du haut de la liste


optimisation :
voir plus de coup = beaucoup de puissance de calcul en plus
-> regarder si on atteint deja cette configuration en moins ou en une quantite egale de score, si c'est le cas arreter
-> configuration definit par les 10/-10 elements de la stack, si on voit 10 coups dans le futur

question :
Score negatif = abandon ?
-> est-ce que je tomberai pas dans un still state (aucune action donne un score positif)
-> rajouter du random pour eviter les still state ??



IMPORTANT ----------------------------------------------------------------------
Start the program by forcing a push b


Steps
- Define a median
-> checks if the difference between the top/bottom of the stack and the element we want to place is lower with the top element or the lower element. do ra + pb if so, otherwise just do pb.
--> if the difference is equal, if higher than median, we take the highest, if lower, the lower
--> do until 1 is left OR the elements left are sorted

-> ratio difference/nb coup pour determiner quel trucs a deplacer ?

->ratio pour differentes actions :
--->sa		: ajouter (element bottom - element top) //after operation
--->sb		: ajouter (element top - element bottom) //after operation
--->r./rr.	: ajouter do_op(ft_lstlast(*s_a), )
							- do_op(*s_a, )
--->r./rr.	: ajouter (prev_element - (top or bottom depending on closest))
							- (new_element - (top or bottom depending on closest))
--->pa		: ajouter (element top - element push)
--->pb		: ajouter (element push - element top)

-->possibilite de finir avec tout dans b, et ce n'est pas worth de push vers a. rajouter un +1 ?